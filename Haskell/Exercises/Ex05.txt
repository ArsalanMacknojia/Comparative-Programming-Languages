// CMPT 383 - Exercise 5
// Arsalan Macknojia

Q.1 Why do you think the fib function you have defined takes so long to do seemingly simple calculations?
A.
The fib function uses recursion which gets computationally expensive very quickly with large input values due to repeated calculations.
For instance, to calculate the 4th Fibonacci number the function makes the following recursive calls:

fib(4) = fib(3) + fib(2)
fib(3) = fib(2) + fib(1)
fib(2) = fib(1) + fib(0)

As evident, function is calling fib(2) and fib(1) twice. These redundant function calls increase exponentially, and at large input run time becomes exponential O(2^n).

Time complexity of Fibonacci function => T(n) = T(n-1) + T(n-2) + C
Time complexity of Fibonacci function => T(n) = O(2^(n-1)) + O(2^(n-2)) + O(1) => O(2^n)


Q.2 Describe the values in the things list.
A. 
`take 10 things` generated the following list [0,1,1,2,3,5,8,13,21,34]. The list is a Fibonacci sequence. 

Q.3 Describe how the values in things are calculated, using what you know about lazy evaluation.
A. 
Lazy evaluation allows certain calculations to be differed until their results are absolutely needed by other computations. These values which are yet to be evaluated are called 'thunk'. 
'things' function uses lazy evaluation along with recursion. It only calculates the values which are needed and store it in a list to refer when needed again in the future instead of re-evaluating it. 


Q.4 Evaluate things!!33 and things!!45. Why is this calculation so much faster than calculating the values in the list fibs?
A.
things!!33 = 3524578   things!!45 = 1134903170

'things' is faster because unlike 'fibs' it only calculate values which are not previously evaluated (thunk). 
Although 'things' do take more memory to store an extra list of values, but in exchange this saves significant computational cost which makes it faster.
